=== HTML ===

- TABLEAUX -

<table>
	<tr>
		<th></th>
		<th></th>
		<th></th>
	</tr>
	<tr>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>

tr = ligne
th = cellule de tête
td = cellule

=============================


Framework d'ajd : React, Angular, View

Back et front échangent des informations via JSON

CSS
BACKGROUND IMAGE

.class {
	min-height: 300px;
	background-image: url(chemin);
}

Chemin d'accès relatif : pour remonter d'un dossier = "../"

Pour placer une image à une position précise en arrière plan : 
	background-repeat: no-repeat;
	background-position: horizontale verticale;

Effet de parallaxe, image fixée en arrière plan :
	background-attachment : fixed;

border-radius : 15px 25px;
			15 25
			25 15

ARRIERE PLAN IMAGE ET COULEUR

background : #ff0000 url("chemin") no-repeat right top;		-> arrière plan rouge avec image non répétée positionnée en haut à droite

HAUTEUR

	height: 200px;
		50%;	-> % de l'espace dispo (par rapport au parent)
		100vh;	-> Toute la hauteur de l'écran (view height)

LARGEUR
	width:	800px;
		90%;	-> % de l'espace dispo (par rapport au parent)	A PRIVILÉGIER !
		100vw;	-> Toute la largeur de l'écran (view width)
si débordement gérer la propriété overflow

TAILLE DE POLICE
	font-size:	18px;
			1.5em;	-> coef par rapport à taille du parent
			2rem;	-> coef par rapport à la taille de la balise html (16px par défaut) RECOMMANDÉ !

POLICES
	font-family	= le nom de la police
	font-style	= italique, etc.
	font-weight	= le gras

LISTES
	list-style:	none;

DISPLAY
	display: inline;	-> ne prend que la place dont il a besoin, le suivant se met à côté
	display: block;		-> prend toute la largeur de la page
	display: none;		-> n'affiche pas du tout sur la page
	visibility: hidden;	-> n'affiche pas l'élément mais conserve sa place sur la page

PSEUDO ÉLEMENTS
	sélecteur::pseudoÉlément {
		propriété: value;
	}

	first-line	-> styliser la 1ere ligne
	first-letter	-> styliser la 1ere lettre

	selection	-> s'utilise sans sélecteur, permet de styliser le texte sélectionné avec la souris

	before		-> insère du contenu avant l'élément sélectionné
	after		-> insère du contenu après l'élément sélectionné


PSEUDO CLASSES
	first-child	-> prend le 1er enfant
	last-child	-> prend le dernier enfant
	nth-child(n)	-> prend le nième enfant

	first-of-type	-> prend le premier élément du type indiqué
	last-of-type	-> prend le dernier élément du type indiqué
	nth-of-type(n)	-> prend le nième élément du type indiqué

	Liste :	https://www.w3schools.com/css/css_pseudo_classes.asp

SÉLECTEUR D'ENFANT DIRECT

	>
	exemple : div > p	-> sélectionne tous les enfants directs de l'élément (ici div)

SÉLECTEUR DE FRÈRES GÉNÉRAL

	~
	exemple : div ~ p	-> sélectionne les p qui sont des frères SUIVANTS le div

SÉLECTEUR DE FRÈRES SUIVANTS ET ADJACENTS
	
	+
	exemple : 	-> sélectionne les éléments qui sont les frères suivants et adjacents

FLEX
	display: flex;
	justify-content:	-> gère l'affichage horizontal
	align-items:		-> gère l'affichage vertical
	flex-wrap:		-> force le retour à la ligne

Il faut spécifier la largeur pour définir la position
flex wrap + changer width des blocs

CENTRER UNE IMAGE EN DISPLAY BLOCK
	margin : 0 auto;

COMPRESSER UNE IMAGE
	https://tinypng.com/

GENERATEUR BORDER RADIUS
	https://9elements.github.io/fancy-border-radius/

=== DISPLAY FLEX ===

1- Pour les enfants (éléments que je veux aligner) :
	- préciser une largeur et une hauteur si besoin
2- Pour le parent
	- faire un display flex
	- gérer l'alignement horizontal
	- gérer l'alignement vertical
NB :
	- pour gérer l'alignement horizontal on utilise justify-content
	- gérer l'alignement vertical, on utilise align-items

======================


FLEX BOX

1- dessiner un wireframe
2- mettre la structure html correspondante
3- mettre du contenu test dans chacun des blocs
4- accorder des bordures et un arrière-plan différents pour chaque bloc
5- faire le découpage avec le flex box
6- mettre le vrai contenu
7- le styliser

======================

GIMP

Supprimer le fond d'une image :

Calque > Transparence > Ajouter un canal alpha



== VISUAL STUDIO CODE ==

ctrl + f2 = remplacer toutes les occurences
ctrl + : = mettre en commentaire

alt + maj + ↓ = copier coller la dernière ligne vers le bas

=== GITHUB ===

→ aller dans le dossier
→ clic droit > Git bash here
→ git init
→ git add *			> sélectionne tout
→ git status			> montre le statut des fichiers
→ git commit -m "texte"		> création du commit
→ git remote add origin <url>	
→ git push -u origin master

POUR CHAQUE NOUVEAU DÉPÔT : 1 FOIS

get init
get remote add origin <url>

POUR CHAQUE COMMIT : N FOIS	

git add *
git status (optionnel)
git commit -m "texte"
git push -u origin master



==== PRESENTATION ORALE ====

Présenter le projet :
à quoi il sert ? pourquoi ? les problématiques, l'utilité

Volume, dynamisme de la parole, éviter le ton monotone

posture : debout, droit, regarder le public entièrement, se déplacer en triangle, explications détaillées : du général au détail


==== BOOTSTRAP ====

jquery = premier script à intégrer
bootstrap 4.6
jquery 3.5.1

Le composant popover n'est pas activé par défaut

Le bundle est composé de Bootstrap et du JS du popover

<script>
            $('*[data-toggle="popover"]').popover("enable");
        </script>

Front et back office = fonctionnalités

========================

Aligner icône et texte au même niveau : mettre height et line-height de même valeur

========================

ANIMATIONS CSS

@keyframes changer-couleur {
  from {background-color: greenyellow;}
  to {background-color: skyblue};
}

Bibliothèque animation : animista

propriété transition se met dans l'état initial de l'élément

activer AOS avec la fonction init

=========================

SASS

Dans invite de commandes :
sass --watch chemin/fichier.scss chemin/fichier.css

→ Inclure le fichier CSS dans le HTML !

=========================

JAVASCRIPT

`bla bla ${variable} bla bla`	-> ajout d'une variable dans une chaîne de caractères
console.log(typeof variable)	-> permet de connaître le type de la variable
null				-> n'a pas de valeur
""				-> null

- TESTER SI UNE VARIABLE EST UN TABLEAU -

Array.isArray(variable)

- CHAINES DE CARACTERES -

variable.length			-> longueur d'une chaîne de caractères
variable.toUpperCase()		-> afficher la chaîne de caractères en majuscule
variable.toLowerCase()		-> afficher la chaîne de caractères en minuscule
variable.substring(0,3)		-> extrait les caractères 0 à 2 d'une chaîne de caractères

--------------

1 == "1"	-> Égalité de la valeur, ici vrai
1 === "1"	-> Égalité du type et de la valeur, ici faux

--------------

+=		-> concaténation

- IF TERNAIRE -

variable = condition ? traitement vrai : traitement faux ;


- SWITCH -

		Variante 1		Variante 2

Switch		variable		true
Case		valeurs exactes		expressions

- FILTER -

tab2 = tab.filter(callback)

retourne dans tab2, les valeurs de tab filtrées selon la callback
return OBLIGATOIRE !

- FONCTIONS DANS LES OBJETS -

this.attribut	-> permet d'appeler l'attribut dans la fonction

- DOM -

.textContent	-> permet de récupérer la valeur textuelle d'un élément, s'il y a des enfants il ne récupère que le texte mais pas la partie HTML

element.textContent = nouvelleValeur	//Modifie le contenu textuel par la valeur donnée, s'il y a une partie HTML elle sera écrasée

- EVENEMENTS -

element.adEventListener("evenement", callback)

Par convention le paramètre de l'événement est noté e ou event ou parfois evt


------
Exemple : Envoi d'un formulaire

//récupérer les champs
const myForm = document.querySelector("#my-form");
myForm.addEventListener("submit", onSubmit);

function onSubmit(e) {
	e.preventDefault();	//empêche le comportement par défaut de l'événement
	

setTimeout(callback, delai)	//exécute la callback après un délai en ms



=========================

JQUERY

Le symbole de jQuery : $

exemple:
console.log($(".para1")); //sélecteur
console.log($(document)); //objet


$(document).ready(callback);	-> attends que le document soit entièrement chargé

element.text()			-> équivalent de .innerText

méthode css()			-> ajoute du style en ligne à un élément
exemple :	$(selecteur).css("propriété", "valeur");
variante:	$(selecteur).css({"propriété":"valeur", "propriété": "valeur", ...});

- Parcours du DOM -

La fonction find cherche un élément à partir du sélecteur donné
$(selecteur).find(selecteur).fonction();

La fonction children retourne les enfants directs du sélecteur, le 2e sélecteur permet de filtrer (il est optionnel)
$(selecteur).children(selecteur2).fonction();

La fonction parent retourne le parent direct d’un sélecteur
$(selecteur).parent().fonction();

La fonction closest retourne le parent le plus proche d’un sélecteur
$(selecteur).closest(selecteur).fonction();

La fonction next retourne le frère suivant d’un sélecteur
$(selecteur).next().fonction();

La fonction prev retourne le frère précédent d’un sélecteur
$(selecteur).prev().fonction();

La fonction first retourne la 1ere occurence d’un sélecteur
$(selecteur).first().fonction();

La fonction last retourne la dernière occurence d’un sélecteur
$(selecteur).last().fonction();

La fonction siblings retourne tous les frères d’un sélecteur
$(selecteur).siblings().fonction();

- Manipulation du DOM -

La fonction text sans paramètre retourne la valeur textuel du sélecteur
$(selecteur).text()
Dans le cas où elle est utilisée avec un paramètre, la valeur du paramètre écrase l'ancienne valeur textuelle du sélecteur
$(selecteur).text(parametre)

La fonction html sans paramètre retourne le contenu HTML du sélecteur
$(selecteur).html()
Dans le cas où elle est utilisée avec un paramètre, la valeur du paramètre écrase l'ancien contenu HTML du sélecteur
$(selecteur).html(parametre)

-------------

Accéder à la valeur d'un input :
$(selecteur).val()

-------------

La fonction prepend ajoute du contenu au début du sélecteur (à l'intérieur et en premier lieu)
$(selecteur).prepend(contenu);

La fonction append ajoute du contenu à la fin du sélecteur (à l'intérieur et en dernier lieu)
$(selecteur).append(contenu);

La fonction before ajoute du contenu avant le sélecteur (à l'extérieur et avant)
$(selecteur).before(contenu);

La fonction after ajoute du contenu après le sélecteur (à l'extérieur et après)
$(selecteur).after(contenu);

La fonction remove supprime un élément du DOM
$(selecteur).remove();

La fonction attr retourne la valeur de l'attribut qu'on lui passe en paramètre
$(selecteur).attr(attribut);
Il est possible d'ajouter un attribut en le passant en paramètre
$(selecteur).attr("attribut", "valeur");
Dans le cas où l'on veut ajouter plusieurs attributs on peut utiliser un objet JSON (comme avec .css())
$(selecteur).attr({attribut : "valeur", attribut2 : "valeur2"});
NB : Si un attribut est déjà existant il sera écrasé par la nouvelle valeur

-------------

ATTRIBUTS DATA-

Les attributs data- sont des attributs qui ne font pas partie de la spécification HTML 5, mais on se permet de les ajouter pour configurer (personnaliser les balises).

<div class='div-data' data-role='user' data-info='{"nom":"HIDRI", "prenom":"Ryan"}' ></div>

La fonction data avec le suffixe permet de lire la valeur de l'attribut data correspondant au suffixe
$(selecteur).data("suffixe");
On peut modifier la valeur d'un attribut data en passant en paramètre la nouvelle valeur en plus du suffixe
$(selecteur).data("suffixe", "nvValeur");

La fonction data change les données dans la mémoire mais dans le DOM. Pour recupérer les données data- au format JSON, la fonction data() est la plus adaptée puisqu'elle lit le format JSON directement (sans avoir recours à la conversion). Pour changer les valeur dans le DOM, il faut utiliser la fonction attr(), dans le cas du JSON, une conversion est nécessaire.

JSON.parse("chaine")		-> chaîne vers JSON
JSON.stringify("chaine")	-> JSON vers chaîne


-------------

EVENEMENTS

$(selecteur).click ( function () {});

-------------

La fonction removeAttr permet de supprimer un attribut
$(selecteur).removeAttr(attribut);

La fonction hasClass permet de savoir si un élément possède une classe donnée
$(selecteur).hasClass(classe);

La fonction addClass ajoute une classe à un élément
$(selecteur).addClass(classe);

La fonction removeClass supprime la classe d'un élément
$(selecteur).removeClass(classe);

La fonction toggleClass alterne entre l'ajout et la suppression d'une classe
$(selecteur).toggleClass(classe);

-------------

Dans le DOM chacun des éléments est objet

-------------

PARCOURS DES ELEMENTS DANS UN TABLEAU

La fonction each permet de parcourir un tableau et de lui passer une callback. La callback admet 2 paramètres, l'index et la valeur de l'élément
$(selecteur).each(callback);

-------------

AFFICHER OU MASQUER DES ELEMENTS

La fonction hide permet de cacher des éléments
$(selecteur).hide();

La fonction show permet d'afficher des éléments
$(selecteur).show();

La fonction toggle permet d'alterner entre l'affichage et le masquage d'un élément
$(selecteur).toggle();


-------------

GESTION DES EVENEMENTS

$(selecteur).evenement(callback);
NB : Ces 3 fonctions peuvent admettre en paramètre la vitesse d'exécution en ms et une callback.

Liste des évenements : https://www.w3schools.com/jquery/jquery_events.asp

La methode on permet de rattacher à un seul élément, un ou plusieurs événements et une seule action, ou bien une action par événement.
$(selecteur).on("evenement", callback);
NB : on peut mettre plusieurs événements en les séparants par des espaces
NB 2 : on peut passer un objet JSON en paramètre. Cet objet JSON contient le nom de l'événement et la fonction callback correspondante

Exemple :
$("ul").on(
  {
    mouseenter: function () {
      console.log("survolé  la ul");
    },
    mouseleave: function () {
      console.log(" quitté la ul");
    },
  }
);


La fonctione one permet d'exécuter un événement une seule fois
$(selecteur).one("evenement", callback);

Pour empêcher le comportement par défaut d'un événement, on associe à ce dernier la fonction preventDefault

-------------

FORMULAIRES

La fonction val permet de récupérer la valeur d'un champ de formulaire
$(selecteur).val();
Si on lui passe un paramètre, la valeur sera mise à jour
$(selecteur).val(nouvelleValeur);


=========================

AJAX

est une technique (pas un langage) qui permet de mettre à jour une partie d'un document sans le quitter ou le recharger
Il est important de noter que l’utilisation d’ajax connait plusieurs methodes (XMLHttpRequest, avec jQuery, la bib axios …)


let request = $.ajax({
    type: "GET",
    url: "controller.php",
    data: Datas,
    dataType: "json",
    timeout: 120000, //2 Minutes
    cache: false,
    contentType: false,
    processData: false,
    beforeSend: function () {
        //Code à jouer avant l'appel ajax en lui même
    },
});

request.done(function (response) {
    //Code à jouer en cas d'éxécution sans erreur du script du PHP
    alert(response);
});
request.fail(function (http_error) {
    //Code à jouer en cas d'éxécution en erreur du script du PHP

    let server_msg = http_error.responseText;
    let code = http_error.status;
    let code_label = http_error.statusText;
    alert("Erreur " + code + " (" + code_label + ") : " + server_msg);
});

---------

Verbes HTTP

GET : recevoir des données
POST : création
PATCH : modif d'un seul champ
PUT : modif de tous les champs
DELETE : suppression

---------

ÉVÉVENEMENTS

Une des problématiques qui se pose lors de l'utilisation d'AJAX, c'est la gestion des événements sur des éléments qui n'existent pas lors du chargement du document
Ils vont exister plus tard
==> Solution : mettre un écouteur d'événements sur tout le document, dès que l'élément va être créé, il va lui rattacher le gestionnaire d'événements
$(document).on("evenement", "selecteur",   callback );

